== Design Considerations

This is a stage where you will find yourself asking a lot of questions and that's totally normal. Now is the time to really dive into the details and get nitpicky. One of the ways you can get more experience with evaluating designs for technical purposes is by getting exposure to different design sets. For example, the Design team you're working with is likely doing design work for other apps in the company.

If you have questions about how a dropdown is supposed to behave, ask if there are other designs you can use as a reference. Many times there are and you should take the time to thoroughly understand how they work. Some of the best questions come from experience with different implementations. Another way to get more exposure to different designs is to start paying close attention to the apps you use! Have you ever _really_ thought about the user flow for your bank app or the flow for an exercise or meditation app? These are all examples of product designs that are in production that you can make comparisons with.

Think about how designs look for other products and how interfaces behave when you're diving into the details. As you think of differences, take notes about the questions they bring up. A word of caution when as you're compiling your list of questions. As you think of a question, look through the documentation you were given. Sometimes the answers are already there and it saves everyone time whe you read the docs first.

You might be wondering what some good questions are and they always depends on your designs and the business logic. Here are some that can get you started as you look at the screens you have available:

- Are there translations to other languages we need account for?
- What are the values for the colors that should be used throughout the app?
- What permissions do users need to see their information?
- What permissions do users need to take actions in the app?
- How many different types of user will there be?
- How long do we expect users to be active, so we know how long an access token should live?
- What is all of the data we expect to handle for users?
- Do we want to show this data for different time ranges?
- Should the table be sortable by each column or only specific columns?
- How do we know which orders should be featured?
- What type of data do the input fields accept?
- When a user saves changes, do we want to redirect them to the previous page?
- When a user saves changes, what should we show them?
- If there's an API error or client-side, what should the user see or be able to do?
- Does the user need to enter more credentials before taking sensitive actions, like changing PII?
- Should input errors be shown inline with the field or by the submit button?
- Do we need to consider tablet-sized devices?
- Will the back-end of this app be used by any other apps?
- Will the front-end need to be integrated into another app?
- Are there any compliances or regulations this app falls under or will get audited by?

You see this list of questions can get very long and I'm sure you thought of other questions as well. It's ok if the list is long. It's better to ask all of the things in the beginning compared to half-way to the deadline. The questions can be all over the place, but these are questions the Product or Design team can answer. There isn't anything technical in here yet, although the answers to all of these questions will drive technical decisions. That's why senior developers tend to deeply understand the business logic.

In order to make the best technical decisions you can, you have to understand the purpose of functionality and how it fits in the overall business. This can give you some foresight on how to build the app in the most maintainable way because you see the direction the business is going. Some of this foresight will come from the data you know you're going to work with.

=== Data-driven design

Data drives design. Everything the designs do is built around how to best deliver data and let users interact with it. Take the table screen for example. The data doesn't have to be displayed as a table. It could be a collapsable list or a graph. That's why you have to dig into these questions about the business logic and what you will be working with. It's one of the reasons that front-end development is usually dependent on back-end development. We'll talk about this more in the next chapter though.

As you go through the designs, it's also a good idea to take notes on the data you see you'll need for each screen. On the settings screen, you can see that you'll need the user's name, shipping address, and language preference in one section. Take notes on potential variable names and data types for these that you feel comfortable sharing with the team. It can help spark the initial conversations around how to approach the project. Also confirm with the Product team that these values are correct and what's expected by the app. Always check with the Product team that you have the correct data and relationships between the data.

They won't explain it in technical terms, but they'll walk you through different scenarios so you can paint the big picture. This is like the discovery phase of the project for your development team. Once you've gone through these designs and you have your questions and notes, get ready to talk about specific features.